#!/usr/bin/env python3
import datetime
import sys


STATE_DEV = '/sys/power/state'
RTC_DEV = '/sys/class/rtc/rtc0/wakealarm'
EPOCH_DEV = '/sys/class/rtc/rtc0/since_epoch'

class RtcSet(Exception):
    pass

def powerstate(dest):
    with open(STATE_DEV, 'w') as f:
        f.write(dest)


def s2ram():
    powerstate('mem')


def set_rtc(dt, force=False):
    '''
    Set the RTC alarm time. Since there can be clock skew between the RTC
    and system clock, and our timestamp is in system clock, we set the
    RTC alarm time to the current RTC time plus the delta between timestamp
    and the current system time
    '''

    # Check current value of the RTC
    with open(RTC_DEV) as f:
        rtc_timestamp = f.read()

    # RTC is already set
    if rtc_timestamp:
        if force:
            with open(RTC_DEV, 'w') as f:
                f.write('0')
        else:
            rtc_date = datetime.datetime.fromtimestamp(int(rtc_timestamp))
            raise RtcSet('RTC already set to %s' % rtc_date)

    now = datetime.datetime.now()
    with open(EPOCH_DEV, 'r') as f:
            rtc_epoch = f.read()
            rtc_now = datetime.datetime.fromtimestamp(int(rtc_epoch))

    alarm_time = rtc_now + (dt - now)
    timestamp = str(int(alarm_time.timestamp()))
    with open(RTC_DEV, 'w') as f:
        f.write(timestamp)

    # Verify that it was set, by reading back the timestamp:
    # if it's not set (which might happen because the one we tried setting was actually
    # in the past), raise
    with open(RTC_DEV, 'r') as f:
        set_ts = f.read()

    if set_ts.rstrip('\n') != timestamp:
        raise RtcSet('failed to set RTC wakeup alarm')

def wake_up_time(hh, mm):
    '''
    Finds the first time matching
    that is into the future.

    Returns timestamp, timedate
    '''
    now = datetime.datetime.now()
    attempt = datetime.datetime(
        now.year,
        now.month,
        now.day,
        hh,
        mm
    )
    if attempt < now:
        attempt += datetime.timedelta(1)
    return attempt.timestamp(), attempt


def main():
    try:
        hh, mm = map(int, sys.argv[1].split(':'))
    except:
        print('Invalid arguments', file=sys.stderr)
        print('%s HH:MM' % sys.argv[0], file=sys.stderr)
        sys.exit(1)

    timestamp, dt = wake_up_time(hh, mm)
    print('Setting RTC for %s' % dt)

    try:
        set_rtc(dt)
    except RtcSet as e:
        print(str(e), file=sys.stderr)
        sys.exit(2)
    except Exception as e:
        print(e.strerror, file=sys.stderr)
        sys.exit(2)

    sys.stdout.flush()
    try:
        s2ram()
    except Exception as e:
        print(e.strerror, file=sys.stderr)
        sys.exit(3)


if __name__ == '__main__':
    main()
